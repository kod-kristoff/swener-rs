use clap::{App, Arg};
use clap::{crate_authors, crate_description, crate_name, crate_version};


pub fn app() -> App<'static, 'static>  {
    App::new(crate_name!())
        .version(crate_version!())
        .author(crate_authors!())
        .about(crate_description!())
        .arg(Arg::with_name("INPUT FILE")
             .help("the input files(s) to work on")
             .multiple(true))
        // print_common_program_options(message_out);
        // print_common_unary_program_options(message_out); 
        .arg(Arg::with_name("infilename")
                .short("i")
                .long("input")
                .takes_value(true)
                .value_name("INFILE")
                .help("Read input transducer from INFILE"))
        .arg(Arg::with_name("outfilename")
                .short("o")
                .long("output")
                .takes_value(true)
                .value_name("OUTFILE")
                .help("Write output transducer to OUTFILE"))
        .arg(Arg::with_name("newline")
                .short("n")
                .long("newline")
                .help("Newline as input separator (default is blank line)"))
        .arg(Arg::with_name("extract-patterns")
                .short("x")
                .long("extract-patterns")
                .help("Only print tagged parts in output"))
        .arg(Arg::with_name("locate")
                .short("l")
                .long("locate")
                .help("Only print locations of matches"))
        .arg(Arg::with_name("print-weights")
                .short("w")
                .long("print-weights")
                .help("In locate mode, include weights of the matches"))
        .arg(Arg::with_name("count-patterns")
                .short("c")
                .long("count-patterns")
                .help("Print the total number of matches when done"))
        .arg(Arg::with_name("delete-patterns")
                .long("delete-patterns")
                .help("Replace matches with opening tags"))
        .arg(Arg::with_name("no-mark-patterns")
                .long("no-mark-patterns")
                .help("Don't tag matched patterns"))
        .arg(Arg::with_name("max-context")
                .long("max-context")
                .help("Upper limit to context length allowed"))
        .arg(Arg::with_name("max-recursion")
                .long("max-recursion")
                .help("Upper limit for recursion"))
        .arg(Arg::with_name("verbose")
                .long("verbose")     
                .help("print verbose output (NER stages) to standard error"))
        .arg(Arg::with_name("debug")
                .long("debug")       
                .help("print debug output to standard error and do not remove temporary files (mainly useful for hfst-swener developers)"
        ))
        .arg(Arg::with_name("weight-cutoff")
                .long("weight-cutoff")
                .takes_value(true)
                .value_name("W")
                .help("Upper limit for allowed weight"))
        .arg(Arg::with_name("time-cutoff")
                .short("t")
                .long("time-cutoff")
                .takes_value(true)
                .value_name("S")
                .help("Limit search after having used S seconds per input"))
        .arg(Arg::with_name("profile")
                .short("p")
                .long("profile")
                .help("Produce profiling data\nUse standard streams for input and output."))
}
